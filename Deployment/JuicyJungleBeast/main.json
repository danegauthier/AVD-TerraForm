{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.21.1.54444",
      "templateHash": "5114824967619861532"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "metadata": {
        "description": "What is the Azure location to deploy to"
      }
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "What is the name of the resource group to deploy to"
      }
    },
    "utc": {
      "type": "string",
      "defaultValue": "[utcNow('yyyy.MM.dd')]"
    },
    "computeGalleryName": {
      "type": "string",
      "metadata": {
        "description": "What is the Compute Gallery name"
      }
    },
    "imageDefinitionName": {
      "type": "string",
      "metadata": {
        "description": "What is the Compute Gallery image definition name"
      }
    },
    "imageOffer": {
      "type": "string",
      "metadata": {
        "description": "What is the Compute Gallery image offer"
      }
    },
    "imageSKU": {
      "type": "string",
      "metadata": {
        "description": "What is the Compute Gallery image SKU"
      }
    },
    "imagePublisher": {
      "type": "string",
      "metadata": {
        "description": "What is the Compute Gallery image publisher"
      }
    },
    "hyperVGeneration": {
      "type": "string",
      "metadata": {
        "description": "What is the Compute Gallery image HyperVGeneration, V1 or V2"
      }
    },
    "osType": {
      "type": "string",
      "metadata": {
        "description": "What is the Compute Gallery image OS Type, Windows or Linux"
      }
    },
    "osState": {
      "type": "string",
      "metadata": {
        "description": "What is the Compute Gallery image OS State, Generalized or Specialized"
      }
    },
    "hostpoolName": {
      "type": "string",
      "metadata": {
        "description": "What is the AVD hostpool name"
      }
    },
    "hostpoolFriendlyName": {
      "type": "string",
      "metadata": {
        "description": "What is the AVD hostpool friendly name"
      }
    },
    "maxSessionLimit": {
      "type": "int",
      "metadata": {
        "description": "What is the AVD max sessions per session host"
      }
    },
    "appGroupName": {
      "type": "string",
      "metadata": {
        "description": "What is the AVD application group name"
      }
    },
    "appGroupNameFriendlyName": {
      "type": "string",
      "metadata": {
        "description": "What is the AVD application group friendly name"
      }
    },
    "workspaceName": {
      "type": "string",
      "metadata": {
        "description": "What is the AVD workspace name"
      }
    },
    "workspaceNameFriendlyName": {
      "type": "string",
      "metadata": {
        "description": "What is the AVD workspace friendly name"
      }
    },
    "applicationgrouptype": {
      "type": "string",
      "metadata": {
        "description": "What is the AVD application group type, Desktop or RemoteApp"
      }
    },
    "preferredAppGroupType": {
      "type": "string",
      "metadata": {
        "description": "What is the AVD preferred application group type, Desktop or RemoteApp"
      }
    },
    "vnetName": {
      "type": "string",
      "metadata": {
        "description": "What is the AVD virtual network name"
      }
    },
    "vnetAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "What is the AVD virtual network address prefix, i.e. 10.0.0.0/16"
      }
    },
    "vnetSubnets": {
      "type": "object",
      "metadata": {
        "description": "What is the AVD virtual network subnet name, ie. {name: \"DefaultSubnet\" addressPrefix: \"10.0.0.0/24\"}"
      }
    },
    "nsgName": {
      "type": "string",
      "metadata": {
        "description": "What is the AVD virtual network NSG name"
      }
    },
    "workspaceSku": {
      "type": "string",
      "allowedValues": [
        "Free",
        "Standard",
        "PerGB2018",
        "PerNode",
        "Premium",
        "Standalone"
      ]
    },
    "hostPoolType": {
      "type": "string",
      "allowedValues": [
        "Pooled",
        "Personal"
      ],
      "metadata": {
        "description": "What is the hostpool type, pooled or personal"
      }
    },
    "loadBalancerType": {
      "type": "string",
      "allowedValues": [
        "BreadthFirst",
        "DepthFirst"
      ]
    },
    "hostpoolLogs": {
      "type": "object"
    },
    "appGroupLogs": {
      "type": "object"
    },
    "workspaceLogs": {
      "type": "object"
    },
    "rdshNumberOfInstances": {
      "type": "int"
    },
    "rdshInitialNumber": {
      "type": "int"
    },
    "rdshVMDiskType": {
      "type": "string"
    },
    "rdshVmSize": {
      "type": "string"
    },
    "rdshPrefix": {
      "type": "string"
    },
    "availabilityZone": {
      "type": "int"
    },
    "availabilitySetName": {
      "type": "string"
    },
    "availabilityOption": {
      "type": "string"
    },
    "aadJoin": {
      "type": "string",
      "defaultValue": "true"
    },
    "intune": {
      "type": "string",
      "defaultValue": "false"
    },
    "keyVaultUserId": {
      "type": "string"
    }
  },
  "variables": {
    "versionName": "[parameters('utc')]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[parameters('resourceGroupName')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy-log-analytics",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "workspaceName": {
            "value": "[parameters('workspaceName')]"
          },
          "workspaceSku": {
            "value": "[parameters('workspaceSku')]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.21.1.54444",
              "templateHash": "14893284812198973881"
            }
          },
          "parameters": {
            "workspaceName": {
              "type": "string"
            },
            "workspaceSku": {
              "type": "string"
            },
            "location": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2022-10-01",
              "name": "[parameters('workspaceName')]",
              "location": "[parameters('location')]",
              "properties": {
                "sku": {
                  "name": "[parameters('workspaceSku')]"
                }
              }
            }
          ],
          "outputs": {
            "workspaceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy-vnet",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "vnetName": {
            "value": "[parameters('vnetName')]"
          },
          "vnetAddressPrefix": {
            "value": "[parameters('vnetAddressPrefix')]"
          },
          "vnetSubnets": {
            "value": "[parameters('vnetSubnets')]"
          },
          "nsgName": {
            "value": "[parameters('nsgName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.21.1.54444",
              "templateHash": "9652155319349279922"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "vnetName": {
              "type": "string"
            },
            "vnetAddressPrefix": {
              "type": "string"
            },
            "vnetSubnets": {
              "type": "object"
            },
            "nsgName": {
              "type": "string"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "subnets",
                "count": "[length(parameters('vnetSubnets').subnets)]",
                "input": {
                  "name": "[parameters('vnetSubnets').subnets[copyIndex('subnets')].name]",
                  "properties": {
                    "addressPrefix": "[parameters('vnetSubnets').subnets[copyIndex('subnets')].addressPrefix]",
                    "networkSecurityGroup": {
                      "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgName'))]"
                    }
                  }
                }
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2023-04-01",
              "name": "[parameters('nsgName')]",
              "location": "[parameters('location')]",
              "properties": {
                "securityRules": []
              }
            },
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2023-04-01",
              "name": "[parameters('vnetName')]",
              "location": "[parameters('location')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "[parameters('vnetAddressPrefix')]"
                  ]
                },
                "enableVmProtection": false,
                "enableDdosProtection": false,
                "subnets": "[variables('subnets')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgName'))]"
              ]
            }
          ],
          "outputs": {
            "vnetId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
            },
            "subnetId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName')), '2023-04-01').subnets[0].id]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy-gallery",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "galleryName": {
            "value": "[parameters('computeGalleryName')]"
          },
          "imageDefinitionName": {
            "value": "[parameters('imageDefinitionName')]"
          },
          "imageOffer": {
            "value": "[parameters('imageOffer')]"
          },
          "imagePublisher": {
            "value": "[parameters('imagePublisher')]"
          },
          "imageSKU": {
            "value": "[parameters('imageSKU')]"
          },
          "versionName": {
            "value": "[variables('versionName')]"
          },
          "hyperVGeneration": {
            "value": "[parameters('hyperVGeneration')]"
          },
          "osState": {
            "value": "[parameters('osState')]"
          },
          "osType": {
            "value": "[parameters('osType')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.21.1.54444",
              "templateHash": "2540881715312298713"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "In which location is the resource stored"
              }
            },
            "galleryName": {
              "type": "string",
              "metadata": {
                "description": "What is the Compute Gallery name"
              }
            },
            "imagePublisher": {
              "type": "string",
              "metadata": {
                "description": "Who is the image publisher"
              }
            },
            "imageDefinitionName": {
              "type": "string",
              "metadata": {
                "description": "What is the definitions name"
              }
            },
            "imageOffer": {
              "type": "string",
              "metadata": {
                "description": "What is the definitions offer"
              }
            },
            "imageSKU": {
              "type": "string",
              "metadata": {
                "description": "What is the definitions SKU"
              }
            },
            "hyperVGeneration": {
              "type": "string",
              "allowedValues": [
                "V1",
                "V2"
              ],
              "metadata": {
                "description": "On which Hypver-V generation are the images"
              }
            },
            "osState": {
              "type": "string",
              "allowedValues": [
                "Generalized",
                "Specialized"
              ],
              "metadata": {
                "description": "What is the definitions offer"
              }
            },
            "osType": {
              "type": "string",
              "allowedValues": [
                "Windows",
                "Linux"
              ],
              "metadata": {
                "description": "What is the definitions type, like Windows or Linux"
              }
            },
            "versionName": {
              "type": "string",
              "metadata": {
                "description": "What is the version name in SemVer format x.x.x"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/galleries",
              "apiVersion": "2022-03-03",
              "name": "[parameters('galleryName')]",
              "location": "[parameters('location')]"
            },
            {
              "type": "Microsoft.Compute/galleries/images",
              "apiVersion": "2022-03-03",
              "name": "[format('{0}/{1}', parameters('galleryName'), parameters('imageDefinitionName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "osState": "[parameters('osState')]",
                "osType": "[parameters('osType')]",
                "identifier": {
                  "publisher": "[parameters('imagePublisher')]",
                  "offer": "[parameters('imageOffer')]",
                  "sku": "[parameters('imageSKU')]"
                },
                "hyperVGeneration": "[parameters('hyperVGeneration')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/galleries', parameters('galleryName'))]"
              ]
            }
          ],
          "outputs": {
            "galleryId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Compute/galleries', parameters('galleryName'))]"
            },
            "galleryDefinitionId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Compute/galleries/images', parameters('galleryName'), parameters('imageDefinitionName'))]"
            },
            "imageVersionId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Compute/galleries/images/versions', split(format('{0}/{1}/{2}', parameters('galleryName'), parameters('imageDefinitionName'), parameters('versionName')), '/')[0], split(format('{0}/{1}/{2}', parameters('galleryName'), parameters('imageDefinitionName'), parameters('versionName')), '/')[1], split(format('{0}/{1}/{2}', parameters('galleryName'), parameters('imageDefinitionName'), parameters('versionName')), '/')[2])]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy-avd-environment",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "hostpoolName": {
            "value": "[parameters('hostpoolName')]"
          },
          "hostpoolFriendlyName": {
            "value": "[parameters('hostpoolFriendlyName')]"
          },
          "maxSessionLimit": {
            "value": "[parameters('maxSessionLimit')]"
          },
          "appGroupName": {
            "value": "[parameters('appGroupName')]"
          },
          "appGroupNameFriendlyName": {
            "value": "[parameters('appGroupNameFriendlyName')]"
          },
          "workspaceName": {
            "value": "[parameters('workspaceName')]"
          },
          "workspaceNameFriendlyName": {
            "value": "[parameters('workspaceNameFriendlyName')]"
          },
          "applicationgrouptype": {
            "value": "[parameters('applicationgrouptype')]"
          },
          "preferredAppGroupType": {
            "value": "[parameters('preferredAppGroupType')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "hostPoolType": {
            "value": "[parameters('hostPoolType')]"
          },
          "loadBalancerType": {
            "value": "[parameters('loadBalancerType')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.21.1.54444",
              "templateHash": "7707670040815188684"
            }
          },
          "parameters": {
            "hostpoolName": {
              "type": "string"
            },
            "hostpoolFriendlyName": {
              "type": "string"
            },
            "maxSessionLimit": {
              "type": "int"
            },
            "appGroupName": {
              "type": "string"
            },
            "appGroupNameFriendlyName": {
              "type": "string"
            },
            "workspaceName": {
              "type": "string"
            },
            "workspaceNameFriendlyName": {
              "type": "string"
            },
            "applicationgrouptype": {
              "type": "string"
            },
            "preferredAppGroupType": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "now": {
              "type": "string",
              "defaultValue": "[utcNow('u')]"
            },
            "hostPoolType": {
              "type": "string",
              "allowedValues": [
                "Pooled",
                "Personal"
              ],
              "metadata": {
                "description": "What is the hostpool type, pooled or personal"
              }
            },
            "loadBalancerType": {
              "type": "string",
              "allowedValues": [
                "BreadthFirst",
                "DepthFirst"
              ]
            }
          },
          "resources": [
            {
              "type": "Microsoft.DesktopVirtualization/hostPools",
              "apiVersion": "2022-10-14-preview",
              "name": "[parameters('hostpoolName')]",
              "location": "[parameters('location')]",
              "properties": {
                "friendlyName": "[parameters('hostpoolFriendlyName')]",
                "hostPoolType": "[parameters('hostPoolType')]",
                "loadBalancerType": "[parameters('loadBalancerType')]",
                "preferredAppGroupType": "[parameters('preferredAppGroupType')]",
                "maxSessionLimit": "[parameters('maxSessionLimit')]",
                "registrationInfo": {
                  "expirationTime": "[dateTimeAdd(parameters('now'), 'P1D')]",
                  "registrationTokenOperation": "Update"
                }
              }
            },
            {
              "type": "Microsoft.DesktopVirtualization/applicationGroups",
              "apiVersion": "2022-10-14-preview",
              "name": "[parameters('appGroupName')]",
              "location": "[parameters('location')]",
              "properties": {
                "friendlyName": "[parameters('appGroupNameFriendlyName')]",
                "applicationGroupType": "[parameters('applicationgrouptype')]",
                "hostPoolArmPath": "[resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('hostpoolName'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('hostpoolName'))]"
              ]
            },
            {
              "type": "Microsoft.DesktopVirtualization/workspaces",
              "apiVersion": "2022-10-14-preview",
              "name": "[parameters('workspaceName')]",
              "location": "[parameters('location')]",
              "properties": {
                "friendlyName": "[parameters('workspaceNameFriendlyName')]",
                "applicationGroupReferences": [
                  "[resourceId('Microsoft.DesktopVirtualization/applicationGroups', parameters('appGroupName'))]"
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.DesktopVirtualization/applicationGroups', parameters('appGroupName'))]"
              ]
            }
          ],
          "outputs": {
            "hostpoolToken": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('hostpoolName')), '2021-01-14-preview').registrationInfo.token]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'deploy-gallery')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'deploy-log-analytics')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy-avd-sessionhosts",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "hostpoolName": {
            "value": "[parameters('hostpoolName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "subnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'deploy-vnet'), '2022-09-01').outputs.subnetId.value]"
          },
          "hostpoolToken": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'deploy-avd-environment'), '2022-09-01').outputs.hostpoolToken.value]"
          },
          "imageResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'deploy-gallery'), '2022-09-01').outputs.imageVersionId.value]"
          },
          "aadJoin": {
            "value": "[parameters('aadJoin')]"
          },
          "intune": {
            "value": "[parameters('intune')]"
          },
          "rdshNumberOfInstances": {
            "value": "[parameters('rdshNumberOfInstances')]"
          },
          "rdshInitialNumber": {
            "value": "[parameters('rdshInitialNumber')]"
          },
          "rdshVMDiskType": {
            "value": "[parameters('rdshVMDiskType')]"
          },
          "rdshVmSize": {
            "value": "[parameters('rdshVmSize')]"
          },
          "rdshPrefix": {
            "value": "[parameters('rdshPrefix')]"
          },
          "availabilityZone": {
            "value": "[parameters('availabilityZone')]"
          },
          "availabilitySetName": {
            "value": "[parameters('availabilitySetName')]"
          },
          "availabilityOption": {
            "value": "[parameters('availabilityOption')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.21.1.54444",
              "templateHash": "3907367078876166706"
            }
          },
          "parameters": {
            "artifactsLocation": {
              "type": "string",
              "defaultValue": "https://raw.githubusercontent.com/Azure/RDS-Templates/master/ARM-wvd-templates/DSC/Configuration.zip",
              "metadata": {
                "description": "The base URI where artifacts required by this template are located."
              }
            },
            "availabilityOption": {
              "type": "string",
              "defaultValue": "None",
              "allowedValues": [
                "None",
                "AvailabilitySet",
                "AvailabilityZone"
              ],
              "metadata": {
                "description": "The availability option for the VMs."
              }
            },
            "availabilitySetName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The name of avaiability set to be used when create the VMs."
              }
            },
            "availabilityZone": {
              "type": "int",
              "defaultValue": 1,
              "allowedValues": [
                1,
                2,
                3
              ],
              "metadata": {
                "description": "The number of availability zone to be used when create the VMs."
              }
            },
            "rdshPrefix": {
              "type": "string",
              "defaultValue": "[take(toLower(resourceGroup().name), 10)]",
              "metadata": {
                "description": "This prefix will be used in combination with the VM number to create the VM name. This value includes the dash, so if using “rdsh” as the prefix, VMs would be named “rdsh-0”, “rdsh-1”, etc. You should use a unique prefix to reduce name collisions in Active Directory."
              }
            },
            "rdshNumberOfInstances": {
              "type": "int",
              "metadata": {
                "description": "Number of session hosts that will be created and added to the hostpool."
              }
            },
            "rdshVMDiskType": {
              "type": "string",
              "allowedValues": [
                "Premium_LRS",
                "StandardSSD_LRS",
                "Standard_LRS"
              ],
              "metadata": {
                "description": "The VM disk type for the VM: HDD or SSD."
              }
            },
            "rdshVmSize": {
              "type": "string",
              "metadata": {
                "description": "The size of the session host VMs."
              }
            },
            "enableAcceleratedNetworking": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enables Accelerated Networking feature, notice that VM size must support it, this is supported in most of general purpose and compute-optimized instances with 2 or more vCPUs, on instances that supports hyperthreading it is required minimum of 4 vCPUs."
              }
            },
            "vmAdministratorAccountUsername": {
              "type": "string",
              "defaultValue": "[uniqueString(resourceGroup().id, subscription().subscriptionId)]",
              "metadata": {
                "description": "A username to be used as the virtual machine administrator account. The vmAdministratorAccountUsername and  vmAdministratorAccountPassword parameters must both be provided. Otherwise, domain administrator credentials provided by administratorAccountUsername and administratorAccountPassword will be used."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for all resources to be created in."
              }
            },
            "networkInterfaceTags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "The tags to be assigned to the network interfaces"
              }
            },
            "rdshInitialNumber": {
              "type": "int",
              "metadata": {
                "description": "VM name prefix initial number."
              }
            },
            "hostpoolName": {
              "type": "string",
              "metadata": {
                "description": "The name of the hostpool"
              }
            },
            "aadJoin": {
              "type": "string",
              "metadata": {
                "description": "IMPORTANT: Please don't use this parameter as AAD Join is not supported yet. True if AAD Join, false if AD join"
              }
            },
            "intune": {
              "type": "string",
              "metadata": {
                "description": "IMPORTANT: Please don't use this parameter as intune enrollment is not supported yet. True if intune enrollment is selected.  False otherwise"
              }
            },
            "virtualMachineTags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "The tags to be assigned to the virtual machines"
              }
            },
            "imageResourceId": {
              "type": "string"
            },
            "subnetId": {
              "type": "string"
            },
            "hostpoolToken": {
              "type": "string"
            }
          },
          "variables": {
            "emptyArray": [],
            "vmAvailabilitySetResourceId": {
              "id": "[resourceId('Microsoft.Compute/availabilitySets/', parameters('availabilitySetName'))]"
            },
            "password": "[concat('P', uniqueString(subscription().id), 'x', '!')]"
          },
          "resources": [
            {
              "copy": {
                "name": "nic",
                "count": "[length(range(0, parameters('rdshNumberOfInstances')))]"
              },
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}{1}-nic', parameters('rdshPrefix'), add(range(0, parameters('rdshNumberOfInstances'))[copyIndex()], parameters('rdshInitialNumber')))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('networkInterfaceTags')]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetId')]"
                      }
                    }
                  }
                ],
                "enableAcceleratedNetworking": "[parameters('enableAcceleratedNetworking')]"
              }
            },
            {
              "copy": {
                "name": "vm",
                "count": "[length(range(0, parameters('rdshNumberOfInstances')))]"
              },
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}{1}-vm', parameters('rdshPrefix'), add(range(0, parameters('rdshNumberOfInstances'))[copyIndex()], parameters('rdshInitialNumber')))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('virtualMachineTags')]",
              "identity": {
                "type": "[if(equals(parameters('aadJoin'), 'true'), 'SystemAssigned', 'None')]"
              },
              "properties": {
                "hardwareProfile": {
                  "vmSize": "[parameters('rdshVmSize')]"
                },
                "availabilitySet": "[if(equals(parameters('availabilityOption'), 'AvailabilitySet'), variables('vmAvailabilitySetResourceId'), null())]",
                "osProfile": {
                  "computerName": "[format('{0}-{1}', parameters('rdshPrefix'), add(range(0, parameters('rdshNumberOfInstances'))[copyIndex()], parameters('rdshInitialNumber')))]",
                  "adminUsername": "[parameters('vmAdministratorAccountUsername')]",
                  "adminPassword": "[variables('password')]"
                },
                "storageProfile": {
                  "imageReference": {
                    "id": "[parameters('imageResourceId')]"
                  },
                  "osDisk": {
                    "createOption": "FromImage",
                    "deleteOption": "Delete",
                    "managedDisk": {
                      "storageAccountType": "[parameters('rdshVMDiskType')]"
                    }
                  }
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}{1}-nic', parameters('rdshPrefix'), add(range(0, parameters('rdshNumberOfInstances'))[copyIndex()], parameters('rdshInitialNumber'))))]",
                      "properties": {
                        "primary": true,
                        "deleteOption": "Delete"
                      }
                    }
                  ]
                },
                "diagnosticsProfile": {
                  "bootDiagnostics": {
                    "enabled": false
                  }
                },
                "licenseType": "Windows_Client"
              },
              "zones": "[if(equals(parameters('availabilityOption'), 'AvailabilityZone'), array(parameters('availabilityZone')), variables('emptyArray'))]",
              "dependsOn": [
                "nic"
              ]
            },
            {
              "copy": {
                "name": "vm_DSC",
                "count": "[length(range(0, parameters('rdshNumberOfInstances')))]"
              },
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}{1}-vm/Microsoft.PowerShell.DSC', parameters('rdshPrefix'), add(range(0, parameters('rdshNumberOfInstances'))[copyIndex()], parameters('rdshInitialNumber')))]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Powershell",
                "type": "DSC",
                "typeHandlerVersion": "2.73",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "modulesUrl": "[parameters('artifactsLocation')]",
                  "configurationFunction": "Configuration.ps1\\AddSessionHost",
                  "properties": {
                    "hostPoolName": "[parameters('hostpoolName')]",
                    "registrationInfoToken": "[parameters('hostpoolToken')]",
                    "aadJoin": "[parameters('aadJoin')]"
                  }
                }
              },
              "dependsOn": [
                "vm"
              ]
            },
            {
              "copy": {
                "name": "vm_AADLoginForWindows",
                "count": "[length(range(0, parameters('rdshNumberOfInstances')))]"
              },
              "condition": "[and(equals(parameters('aadJoin'), 'true'), equals(parameters('intune'), 'false'))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}{1}-vm/AADLoginForWindows', parameters('rdshPrefix'), add(range(0, parameters('rdshNumberOfInstances'))[copyIndex()], parameters('rdshInitialNumber')))]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.ActiveDirectory",
                "type": "AADLoginForWindows",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "vm_DSC"
              ]
            },
            {
              "copy": {
                "name": "vm_AADLoginForWindowsWithIntune",
                "count": "[length(range(0, parameters('rdshNumberOfInstances')))]"
              },
              "condition": "[and(equals(parameters('aadJoin'), 'true'), equals(parameters('intune'), 'true'))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}{1}-vm/AADLoginForWindowsWithIntune', parameters('rdshPrefix'), add(range(0, parameters('rdshNumberOfInstances'))[copyIndex()], parameters('rdshInitialNumber')))]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.ActiveDirectory",
                "type": "AADLoginForWindows",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "mdmId": "0000000a-0000-0000-c000-000000000000"
                }
              },
              "dependsOn": [
                "vm_DSC"
              ]
            }
          ],
          "outputs": {
            "localPass": {
              "type": "string",
              "value": "[variables('password')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'deploy-avd-environment')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'deploy-gallery')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'deploy-vnet')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy-avd-diagnostics",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "hostpoolName": {
            "value": "[parameters('hostpoolName')]"
          },
          "appGroupName": {
            "value": "[parameters('appGroupName')]"
          },
          "workspaceName": {
            "value": "[parameters('workspaceName')]"
          },
          "workspaceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'deploy-log-analytics'), '2022-09-01').outputs.workspaceId.value]"
          },
          "hostpoolLogs": {
            "value": "[parameters('hostpoolLogs')]"
          },
          "appGroupLogs": {
            "value": "[parameters('appGroupLogs')]"
          },
          "workspaceLogs": {
            "value": "[parameters('workspaceLogs')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.21.1.54444",
              "templateHash": "569403568470451834"
            }
          },
          "parameters": {
            "hostpoolName": {
              "type": "string"
            },
            "appGroupName": {
              "type": "string"
            },
            "workspaceName": {
              "type": "string"
            },
            "workspaceId": {
              "type": "string"
            },
            "hostpoolLogs": {
              "type": "object"
            },
            "appGroupLogs": {
              "type": "object"
            },
            "workspaceLogs": {
              "type": "object"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "hpLogs",
                "count": "[length(parameters('hostpoolLogs').categories)]",
                "input": {
                  "category": "[parameters('hostpoolLogs').categories[copyIndex('hpLogs')]]",
                  "enabled": true
                }
              },
              {
                "name": "apLogs",
                "count": "[length(parameters('appGroupLogs').categories)]",
                "input": {
                  "category": "[parameters('appGroupLogs').categories[copyIndex('apLogs')]]",
                  "enabled": true
                }
              },
              {
                "name": "wpLogs",
                "count": "[length(parameters('workspaceLogs').categories)]",
                "input": {
                  "category": "[parameters('workspaceLogs').categories[copyIndex('wpLogs')]]",
                  "enabled": true
                }
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.DesktopVirtualization/hostPools/{0}', parameters('hostpoolName'))]",
              "name": "hostpool-diag",
              "properties": {
                "workspaceId": "[parameters('workspaceId')]",
                "logs": "[variables('hpLogs')]"
              }
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.DesktopVirtualization/applicationGroups/{0}', parameters('appGroupName'))]",
              "name": "appgroup-diag",
              "properties": {
                "workspaceId": "[parameters('workspaceId')]",
                "logs": "[variables('apLogs')]"
              }
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.DesktopVirtualization/workspaces/{0}', parameters('workspaceName'))]",
              "name": "workspacepool-diag",
              "properties": {
                "workspaceId": "[parameters('workspaceId')]",
                "logs": "[variables('wpLogs')]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'deploy-avd-environment')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'deploy-log-analytics')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy-keyvault",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "principalId": {
            "value": "[parameters('keyVaultUserId')]"
          },
          "keyVaultName": {
            "value": "[concat('kv-avd', uniqueString(subscription().id))]"
          },
          "skuName": {
            "value": "standard"
          },
          "secretsObject": {
            "value": {
              "secrets": [
                {
                  "secretName": "kv-avd-secret",
                  "secretValue": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'deploy-avd-sessionhosts'), '2022-09-01').outputs.localPass.value]"
                }
              ]
            }
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.21.1.54444",
              "templateHash": "4294519163956874428"
            }
          },
          "parameters": {
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the key vault."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Specifies the Azure location where the key vault should be created."
              }
            },
            "enabledForDeployment": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Specifies whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault."
              }
            },
            "enabledForDiskEncryption": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Specifies whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys."
              }
            },
            "enabledForTemplateDeployment": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
              }
            },
            "tenantId": {
              "type": "string",
              "defaultValue": "[subscription().tenantId]",
              "metadata": {
                "description": "Specifies the Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. Get it by using Get-AzSubscription cmdlet."
              }
            },
            "objectId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Specifies the object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies. Get it by using Get-AzADUser or Get-AzADServicePrincipal cmdlets."
              }
            },
            "keysPermissions": {
              "type": "array",
              "defaultValue": [
                "list"
              ],
              "metadata": {
                "description": "Specifies the permissions to keys in the vault. Valid values are: all, encrypt, decrypt, wrapKey, unwrapKey, sign, verify, get, list, create, update, import, delete, backup, restore, recover, and purge."
              }
            },
            "secretsPermissions": {
              "type": "array",
              "defaultValue": [
                "list",
                "get"
              ],
              "metadata": {
                "description": "Specifies the permissions to secrets in the vault. Valid values are: all, get, list, set, delete, backup, restore, recover, and purge."
              }
            },
            "skuName": {
              "type": "string",
              "allowedValues": [
                "standard",
                "premium"
              ],
              "metadata": {
                "description": "Specifies whether the key vault is a standard vault or a premium vault."
              }
            },
            "secretsObject": {
              "type": "object",
              "metadata": {
                "description": "Specifies all secrets {\"secretName\":\"\",\"secretValue\":\"\"} wrapped in a secure object."
              }
            },
            "roleDefinitionId": {
              "type": "string",
              "defaultValue": "4633458b-17de-408a-b874-0445c86b69e6",
              "metadata": {
                "description": "Specifies the role definition id for the role assignment. Default: Azure Key Vault Secrets User"
              }
            },
            "principalId": {
              "type": "string",
              "metadata": {
                "description": "Specifies the principal id for the role assignment."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2023-02-01",
              "name": "[parameters('keyVaultName')]",
              "location": "[parameters('location')]",
              "tags": {
                "displayName": "KeyVault"
              },
              "properties": {
                "enabledForDeployment": "[parameters('enabledForDeployment')]",
                "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
                "enabledForDiskEncryption": "[parameters('enabledForDiskEncryption')]",
                "enableRbacAuthorization": true,
                "tenantId": "[parameters('tenantId')]",
                "accessPolicies": [],
                "sku": {
                  "name": "[parameters('skuName')]",
                  "family": "A"
                },
                "networkAcls": {
                  "defaultAction": "Allow",
                  "bypass": "AzureServices"
                }
              }
            },
            {
              "copy": {
                "name": "secrets",
                "count": "[length(parameters('secretsObject').secrets)]"
              },
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2018-02-14",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('secretsObject').secrets[copyIndex()].secretName)]",
              "properties": {
                "value": "[parameters('secretsObject').secrets[copyIndex()].secretValue]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[guid(format('{0}-{1}-{2}', parameters('keyVaultName'), parameters('roleDefinitionId'), parameters('principalId')))]",
              "properties": {
                "principalId": "[parameters('principalId')]",
                "principalType": "User",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'deploy-avd-sessionhosts')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
      ]
    }
  ]
}